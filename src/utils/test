/*const registerUser  = asyncHandler(async(req,res) => {
    // get user details from frontend
    // validation - not empty
    // check if user already exists: username, email
    // check for images, check for avatar
    // upload them to cloudinary, avatar
    // create user object - create entry in db
    // remove password and refresh token field from response
    // check for user creation
    // return res
    const {fullName, email, username, password } = req.body
    console.log("email: ", email);
    if (
        [fullName, email, username, password].some((field) => field?.trim() === "")
    ) {
        throw new ApiError(400, "All fields are required")
    }

    const existedUser = await User.findOne({
        $or: [{ username }, { email }]
    })

    if (existedUser) {
        throw new ApiError(409, "User with email or username already exists")
    }
    console.log("req.files:", req.files);
    
    const avatarLocalPath = req.files?.avatar[0]?.path;
    if (!req.files || !req.files.avatar || !req.files.avatar[0]?.path) {
        throw new ApiError(400, "Avatar file is required");
    }
    

    //const coverImageLocalPath = req.files?.coverImage[0]?.path;

    let coverImageLocalPath;
    if (req.files && Array.isArray(req.files.coverImage) && req.files.coverImage.length > 0) {
        coverImageLocalPath = req.files.coverImage[0].path
    }
    

   


    const avatar =   await uploadOnCloudinary(avatarLocalPath)
    const coverImage = coverImageLocalPath? await uploadOnCloudinary(coverImageLocalPath):null;

    if (!avatar) {
        throw new ApiError(400, "Avatar file upload is fail")
    }
   

    const user = await User.create({
        fullName,
        avatar: avatar.url,
        coverImage: coverImage?.url || "",
        email, 
        password,
        username: username.toLowerCase()
    })

    const createdUser = await User.findById(user._id).select(
        "-password -refreshToken"
    )

    if (!createdUser) {
        throw new ApiError(500, "Something went wrong while registering the user")
    }

    return res.status(201).json(
        new ApiResponse(200, createdUser, "User registered Successfully")
    )

    })


export{registerUser}







import { v2 as cloudinary } from "cloudinary";
import fs from "fs";

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

const uploadOnCloudinary = async (localFilePath) => {
  try {
    if (!localFilePath) {
      console.log("No file path provided.");
      return null;
    }
    console.log("Uploading file to Cloudinary:", localFilePath);

    // Upload the file to Cloudinary
    const response = await cloudinary.uploader.upload(localFilePath, {
      resource_type: "auto" // auto-detect file type (image/video/etc.)
    });

    // Log the successful upload (optional)
    console.log("File uploaded to Cloudinary:", response.url);

    // Remove the temporary file after successful upload
    try {
      fs.unlinkSync(localFilePath);
      console.log("Temporary file removed:", localFilePath);
    } catch (unlinkError) {
      console.error("Error removing temporary file:", unlinkError);
    }

    return response;
  } catch (error) {
    console.error("Error uploading to Cloudinary:", error);
    
    // Cleanup the temporary file if an error occurred during upload
    try {
      fs.unlinkSync(localFilePath);
      console.log("Temporary file removed after error:", localFilePath);
    } catch (unlinkError) {
      console.error("Error removing temporary file after upload failure:", unlinkError);
    }

    return null; // Return null if the upload fails
  }
};

export { uploadOnCloudinary };*/
